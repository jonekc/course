@page "/login"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ClientAuthenticationStateProvider AuthenticationStateProvider

<h3>Logowanie</h3>
@if (error != null)
{
    <div class="text-danger">@error</div>
}
<EditForm Model="@request" OnValidSubmit="HandleSubmit" class="card bg-light mt-4 p-3">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="username" class="col-md-3 col-lg-2 col-form-label">Nazwa użytkownika:</label>
        <div class="col-md-9 col-lg-10">
            <InputText id="username" class="form-control" @bind-Value=request.Login />
            <ValidationMessage For="@(() => request.Login)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="password" class="col-md-3 col-lg-2 col-form-label">Hasło:</label>
        <div class="col-md-9 col-lg-10">
            <InputText type="password" id="password" class="form-control" @bind-Value=request.Password />
            <ValidationMessage For="@(() => request.Password)" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button class="btn btn-success" disabled=@isLoading>
                <span class=@(isLoading ? "spinner-border spinner-border-sm mr-1" : "") role="status"></span>
                <span>@(isLoading ? "Logowanie" : "Zaloguj się")</span>
            </button>
        </div>
    </div>
</EditForm>

@code {
    private AuthenticateRequest request = new();
    private string error;
    private bool isLoading;
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await AuthenticationStateTask;
        if (authenticationState.User.Identity.IsAuthenticated)
        {
            Redirect();
        }
    }

    private async Task HandleSubmit()
    {
        isLoading = true;
        StateHasChanged();
        string errorResponse = await AuthService.Login(request);

        if (String.IsNullOrEmpty(errorResponse))
        {
            Redirect();
        }
        else
        {
            isLoading = false;
            error = errorResponse;
            StateHasChanged();
        }
    }

    private void Redirect()
    {
        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("url", out var _url))
        {
            NavigationManager.NavigateTo(_url);
        }
        else
        {
            NavigationManager.NavigateTo("");
        }
    }
}
